// Code generated by MockGen. DO NOT EDIT.
// Source: ./models/job.go

package mock_models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	. "seekjob/models"
)

// MockJobOrmer is a mock of JobOrmer interface
type MockJobOrmer struct {
	ctrl     *gomock.Controller
	recorder *MockJobOrmerMockRecorder
}

// MockJobOrmerMockRecorder is the mock recorder for MockJobOrmer
type MockJobOrmerMockRecorder struct {
	mock *MockJobOrmer
}

// NewMockJobOrmer creates a new mock instance
func NewMockJobOrmer(ctrl *gomock.Controller) *MockJobOrmer {
	mock := &MockJobOrmer{ctrl: ctrl}
	mock.recorder = &MockJobOrmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockJobOrmer) EXPECT() *MockJobOrmerMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockJobOrmer) Get(id string) (*Job, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockJobOrmerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockJobOrmer)(nil).Get), arg0)
}

// GetAll mocks base method
func (_m *MockJobOrmer) GetAll(query string, category string, country string, source string, offset int, limit int) ([]*Job, error) {
	ret := _m.ctrl.Call(_m, "GetAll", query, category, country, source, offset, limit)
	ret0, _ := ret[0].([]*Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (_mr *MockJobOrmerMockRecorder) GetAll(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAll", reflect.TypeOf((*MockJobOrmer)(nil).GetAll), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSources mocks base method
func (_m *MockJobOrmer) GetSources() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetSources")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSources indicates an expected call of GetSources
func (_mr *MockJobOrmerMockRecorder) GetSources() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSources", reflect.TypeOf((*MockJobOrmer)(nil).GetSources))
}

// GetCountries mocks base method
func (_m *MockJobOrmer) GetCountries(source string) ([]*JobInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCountries", source)
	ret0, _ := ret[0].([]*JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries
func (_mr *MockJobOrmerMockRecorder) GetCountries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCountries", reflect.TypeOf((*MockJobOrmer)(nil).GetCountries), arg0)
}

// GetCategories mocks base method
func (_m *MockJobOrmer) GetCategories(source string) ([]*JobInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCategories", source)
	ret0, _ := ret[0].([]*JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (_mr *MockJobOrmerMockRecorder) GetCategories(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCategories", reflect.TypeOf((*MockJobOrmer)(nil).GetCategories), arg0)
}

// Upsert mocks base method
func (_m *MockJobOrmer) Upsert(job Job) error {
	ret := _m.ctrl.Call(_m, "Upsert", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert
func (_mr *MockJobOrmerMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Upsert", reflect.TypeOf((*MockJobOrmer)(nil).Upsert), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./cache/job.go

package mock_cache

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "seekjob/models"
	time "time"
)

// MockJobHandler is a mock of JobHandler interface
type MockJobHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJobHandlerMockRecorder
}

// MockJobHandlerMockRecorder is the mock recorder for MockJobHandler
type MockJobHandlerMockRecorder struct {
	mock *MockJobHandler
}

// NewMockJobHandler creates a new mock instance
func NewMockJobHandler(ctrl *gomock.Controller) *MockJobHandler {
	mock := &MockJobHandler{ctrl: ctrl}
	mock.recorder = &MockJobHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockJobHandler) EXPECT() *MockJobHandlerMockRecorder {
	return _m.recorder
}

// GetJob mocks base method
func (_m *MockJobHandler) GetJob(id string) (*models.Job, error) {
	ret := _m.ctrl.Call(_m, "GetJob", id)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (_mr *MockJobHandlerMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetJob", reflect.TypeOf((*MockJobHandler)(nil).GetJob), arg0)
}

// GetCountries mocks base method
func (_m *MockJobHandler) GetCountries(source string) ([]*models.JobInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCountries", source)
	ret0, _ := ret[0].([]*models.JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries
func (_mr *MockJobHandlerMockRecorder) GetCountries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCountries", reflect.TypeOf((*MockJobHandler)(nil).GetCountries), arg0)
}

// GetCategories mocks base method
func (_m *MockJobHandler) GetCategories(source string) ([]*models.JobInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCategories", source)
	ret0, _ := ret[0].([]*models.JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (_mr *MockJobHandlerMockRecorder) GetCategories(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetCategories", reflect.TypeOf((*MockJobHandler)(nil).GetCategories), arg0)
}

// SetJob mocks base method
func (_m *MockJobHandler) SetJob(job *models.Job, expiryDuration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetJob", job, expiryDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJob indicates an expected call of SetJob
func (_mr *MockJobHandlerMockRecorder) SetJob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetJob", reflect.TypeOf((*MockJobHandler)(nil).SetJob), arg0, arg1)
}

// SetCountries mocks base method
func (_m *MockJobHandler) SetCountries(source string, countries []*models.JobInfo, expiryDuration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetCountries", source, countries, expiryDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCountries indicates an expected call of SetCountries
func (_mr *MockJobHandlerMockRecorder) SetCountries(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCountries", reflect.TypeOf((*MockJobHandler)(nil).SetCountries), arg0, arg1, arg2)
}

// SetCategories mocks base method
func (_m *MockJobHandler) SetCategories(source string, categories []*models.JobInfo, expiryDuration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetCategories", source, categories, expiryDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCategories indicates an expected call of SetCategories
func (_mr *MockJobHandlerMockRecorder) SetCategories(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetCategories", reflect.TypeOf((*MockJobHandler)(nil).SetCategories), arg0, arg1, arg2)
}

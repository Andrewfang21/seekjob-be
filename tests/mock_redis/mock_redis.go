// Code generated by MockGen. DO NOT EDIT.
// Source: ./redis/handler.go

package mock_redis

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockHandler) Get(key string, variable interface{}) (bool, error) {
	ret := _m.ctrl.Call(_m, "Get", key, variable)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockHandlerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockHandler)(nil).Get), arg0, arg1)
}

// SetWithExpiry mocks base method
func (_m *MockHandler) SetWithExpiry(key string, value interface{}, duration time.Duration) error {
	ret := _m.ctrl.Call(_m, "SetWithExpiry", key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpiry indicates an expected call of SetWithExpiry
func (_mr *MockHandlerMockRecorder) SetWithExpiry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetWithExpiry", reflect.TypeOf((*MockHandler)(nil).SetWithExpiry), arg0, arg1, arg2)
}

// Delete mocks base method
func (_m *MockHandler) Delete(key string) error {
	ret := _m.ctrl.Call(_m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockHandler)(nil).Delete), arg0)
}
